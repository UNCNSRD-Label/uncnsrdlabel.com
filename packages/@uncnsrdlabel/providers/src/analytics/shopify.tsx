"use client";

import {
  AnalyticsEventName,
  AnalyticsPageType,
  ShopifySalesChannel,
  getClientBrowserParameters,
  sendShopifyAnalytics,
  type ShopifyAddToCartPayload,
  type ShopifyPageViewPayload,
} from "@shopify/hydrogen";
import {
  type CurrencyCode,
  type LanguageCode,
} from "@shopify/hydrogen/storefront-api-types";
import { AnalyticsPlugin } from "analytics";
import { getCookie } from "cookies-next";
import { PluginConfig, PluginEventFunctions } from "./types";

export interface ShopifyConfig extends PluginConfig {
  cartId?: string;
  collectionHandle?: string;
  locale: Intl.Locale;
  shopDomain: string;
  shopId: string;
  storefrontId?: string;
}

export type ShopifyAnalyticsPlugin = AnalyticsPlugin & PluginEventFunctions;

// eslint-disable-next-line no-unused-vars
export function shopify(config: ShopifyConfig): ShopifyAnalyticsPlugin {
  const {
    collectionHandle,
    hasUserConsent,
    locale,
    shopDomain,
    shopId,
    storefrontId,
  } = config;

  const customerId = getCookie("customerId");

  const analyticsShopData = {
    /** If we have consent from buyer for data collection */
    hasUserConsent,
    /** Shopify shop id in the form of `gid://shopify/Shop/<id>`. */
    shopId,
    /** Currency code. */
    // currency: See instances of analyticsShopData
    /** Shopify storefront id generated by Hydrogen sales channel. */
    storefrontId,
    /** Language displayed to buyer. */
    acceptedLanguage: locale.language as LanguageCode,
    /** Shopify sales channel. */
    shopifySalesChannel: ShopifySalesChannel.headless,
    /** Shopify customer id in the form of `gid://shopify/Customer/<id>`. */
    customerId,
    /** Total value of products. */
    // totalValue: See instances of analyticsShopData
    /** Product list. */
    // products: See instances of analyticsShopData
  };

  const sendShopifyAnalyticsPayloadBase = {
    ...analyticsShopData,
    hasUserConsent,
    shopDomain,
  };

  return {
    /* Name is a required field for plugins */
    name: "shopify-plugin",
    identify: async ({ payload }) => {
      if (config.debug) {
        console.debug("klaviyo:identify", { payload });
      }
    },
    initialize: ({ config }: { config: ShopifyConfig }) => {
      if (config.debug) {
        console.debug("shopify:initialize", { config });
      }
    },
    loaded: () => {
      if (config.debug) {
        console.debug("shopify:loaded");
      }

      return !!sendShopifyAnalytics;
    },
    page: ({ payload }) => {
      if (config.debug) {
        console.debug("shopify:page", { payload });
      }

      const pageType = payload.properties
        ?.pageType as keyof typeof AnalyticsPageType;

      const product = payload.properties?.product
        ? {
            products: [
              {
                ...payload.properties?.product,
                productGid: payload.properties?.product?.id,
                name: payload.properties?.product?.title,
                brand: payload.properties?.product?.vendor,
                price:
                  payload.properties?.product?.priceRange.minVariantPrice
                    .amount,
              },
            ],
          }
        : undefined;

      const shopifyPageViewPayload: ShopifyPageViewPayload = {
        ...getClientBrowserParameters(),
        ...sendShopifyAnalyticsPayloadBase,
        /** Currency code. */
        currency: payload.properties?.product?.priceRange.minVariantPrice
          .currencyCode as CurrencyCode,
        /** Total value of products. */
        ...(payload.properties?.product?.priceRange.minVariantPrice?.amount && {
          totalValue: Number.parseInt(
            payload.properties?.product?.priceRange.minVariantPrice.amount,
          ),
        }),
        /** Product list. */
        ...(product && { ...product }),
        /** Canonical url. */
        ...(payload.properties?.url && {
          canonicalUrl: payload.properties?.url,
        }),
        /** Shopify page type. */
        pageType,
        /** Shopify resource id in the form of `gid://shopify/<type>/<id>`. */
        ...(payload.properties?.product && {
          resourceId: `gid://shopify/${AnalyticsPageType.product}>/${payload.properties?.product?.id}`,
        }),
        /** Shopify collection handle. */
        collectionHandle,
        /** Search term used on a search results page. */
        searchString: payload.properties?.search,
      };

      sendShopifyAnalytics({
        eventName: AnalyticsEventName.PAGE_VIEW,
        payload: shopifyPageViewPayload,
      });
    },
    ready: () => {
      if (config.debug) {
        console.debug("gtm:ready");
      }
    },
    track: ({ payload }) => {
      if (config.debug) {
        console.debug("shopify:track", { payload });
      }

      if (payload.event === "view_item") {
        console.log(
          "view_item",
          payload.properties?.type,
          "expecting product or variant",
        );

        const product = payload.properties?.product
          ? {
              /** Total value of products. */
              totalValue: Number.parseInt(
                payload.properties?.product?.priceRange.minVariantPrice.amount,
              ),
              products: [
                {
                  ...payload.properties?.product,
                  productGid: payload.properties?.product?.id,
                  name: payload.properties?.product?.title,
                  brand: payload.properties?.product?.vendor,
                  price:
                    payload.properties?.product?.priceRange.minVariantPrice
                      .amount,
                },
              ],
            }
          : undefined;

        const shopifyPageViewPayload: ShopifyPageViewPayload = {
          ...getClientBrowserParameters(),
          ...sendShopifyAnalyticsPayloadBase,
          /** Currency code. */
          currency: payload.properties?.product?.priceRange.minVariantPrice
            .currencyCode as CurrencyCode,
          /** Product list. */
          ...(product && { ...product }),
          /** Canonical url. */
          canonicalUrl: payload.properties?.url,
          /** Shopify page type. */
          pageType: AnalyticsPageType.product,
          /** Shopify resource id in the form of `gid://shopify/<type>/<id>`. */
          ...(payload.properties?.product && {
            resourceId: `gid://shopify/${AnalyticsPageType.product}>/${payload.properties?.product?.id}`,
          }),
          /** Shopify collection handle. */
          collectionHandle,
          /** Search term used on a search results page. */
          searchString: payload.properties?.search,
          ...(product && { product }),
        };

        sendShopifyAnalytics({
          eventName: AnalyticsEventName.PAGE_VIEW,
          payload: shopifyPageViewPayload,
        });
      }

      if (payload.event === "add_to_cart") {
        const { cartId } = config;

        const product = payload.properties?.product
        ? {
            /** Total value of products. */
            totalValue: Number.parseInt(
              payload.properties?.product?.priceRange.minVariantPrice.amount,
            ),
            products: [
              {
                ...payload.properties?.product,
                productGid: payload.properties?.product?.id,
                name: payload.properties?.product?.title,
                brand: payload.properties?.product?.vendor,
                price:
                  payload.properties?.product?.priceRange.minVariantPrice
                    .amount,
              },
            ],
          }
        : undefined;

        if (cartId) {
          const shopifyAddToCartPayload: ShopifyAddToCartPayload = {
            ...getClientBrowserParameters(),
            ...sendShopifyAnalyticsPayloadBase,
            /** Currency code. */
            currency: payload.properties?.product?.priceRange.minVariantPrice
              .currencyCode as CurrencyCode,
            /** Product list. */
            ...(product && { ...product }),
            /** Shopify cart id in the form of `gid://shopify/Cart/<id>`. */
            cartId,
          };

          sendShopifyAnalytics({
            eventName: AnalyticsEventName.ADD_TO_CART,
            payload: shopifyAddToCartPayload,
          });
        }
      }
    },
  };
}
