/* eslint-disable */
import * as types from './graphql.js';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  fragment cart on Cart {\n    id\n    checkoutUrl\n    cost {\n      subtotalAmount {\n        amount\n        currencyCode\n      }\n      totalAmount {\n        amount\n        currencyCode\n      }\n      totalTaxAmount {\n        amount\n        currencyCode\n      }\n    }\n    lines(first: 64) {\n      edges {\n        node {\n          cost {\n            amountPerQuantity {\n              amount\n              currencyCode\n            }\n            subtotalAmount {\n              amount\n              currencyCode\n            }\n            totalAmount {\n              amount\n              currencyCode\n            }\n          }\n          id\n          merchandise {\n            ... on ProductVariant {\n              id\n              product {\n                ...productBasic\n              }\n              title\n              selectedOptions {\n                name\n                value\n              }\n            }\n          }\n          quantity\n        }\n      }\n    }\n    totalQuantity\n  }\n": types.CartFragmentDoc,
    "\n  fragment collection on Collection {\n    handle\n    title\n    description\n    seo {\n      ...seo\n    }\n    updatedAt\n  }\n": types.CollectionFragmentDoc,
    "\n  fragment customer on Customer {\n    acceptsMarketing\n    addresses(first: 16) {\n      nodes {\n        ...mailingAddress\n      }\n    }\n    createdAt\n    dateOfBirth: metafield(namespace: \"facts\", key: \"birth_date\") {\n      ...metafield\n    }\n    defaultAddress {\n      ...mailingAddress\n    }\n    displayName\n    email\n    firstName\n    id\n    lastIncompleteCheckout {\n      id\n    }\n    lastName\n    numberOfOrders\n    orders(first: 16) {\n      nodes {\n        ...order\n      }\n    }\n    phone\n    tags\n    updatedAt\n  }\n": types.CustomerFragmentDoc,
    "\n  fragment image on Image {\n    altText\n    blurDataURL: url(transform: { crop: CENTER, maxWidth: 200 })\n    height\n    id\n    url\n    width\n  }\n": types.ImageFragmentDoc,
    "\n  fragment mailingAddress on MailingAddress {\n    address1\n    address2\n    city\n    company\n    country\n    countryCodeV2\n    firstName\n    formatted\n    formattedArea\n    id\n    lastName\n    name\n    phone\n    province\n    provinceCode\n    zip\n  }\n": types.MailingAddressFragmentDoc,
    "\n  fragment metafield on Metafield {\n    value\n    id\n    key\n    namespace\n    type\n  }\n": types.MetafieldFragmentDoc,
    "\n  fragment order on Order {\n    billingAddress {\n      ...mailingAddress\n    }\n    cancelReason\n    canceledAt\n    currencyCode\n    currentSubtotalPrice {\n      amount\n      currencyCode\n    }\n    currentTotalDuties {\n      amount\n      currencyCode\n    }\n    currentTotalPrice {\n      amount\n      currencyCode\n    }\n    customerLocale\n    customerUrl\n    edited\n    email\n    financialStatus\n    fulfillmentStatus\n    id\n    name\n    orderNumber\n    originalTotalDuties {\n      amount\n      currencyCode\n    }\n    originalTotalPrice {\n      amount\n      currencyCode\n    }\n    phone\n    processedAt\n    shippingAddress {\n      ...mailingAddress\n    }\n    shippingDiscountAllocations {\n      allocatedAmount {\n        amount\n        currencyCode\n      }\n      discountApplication {\n        allocationMethod\n        targetSelection\n        targetType\n        value {\n          ... on MoneyV2 {\n            amount\n            currencyCode\n          }\n          ... on PricingPercentageValue {\n            percentage\n          }\n        }\n      }\n    }\n    statusUrl\n    subtotalPrice {\n      amount\n      currencyCode\n    }\n    successfulFulfillments {\n      trackingCompany\n      trackingInfo {\n        number\n        url\n      }\n    }\n    totalPrice {\n      amount\n      currencyCode\n    }\n    totalRefunded {\n      amount\n      currencyCode\n    }\n    totalShippingPrice {\n      amount\n      currencyCode\n    }\n    totalTax {\n      amount\n      currencyCode\n    }\n  }\n": types.OrderFragmentDoc,
    "\n  fragment page on Page {\n    id\n    title\n    handle\n    body\n    bodySummary\n    seo {\n      ...seo\n    }\n    createdAt\n    updatedAt\n    classes: metafield(namespace: \"custom\", key: \"classes\") {\n      __typename\n      value\n    }\n    style: metafield(namespace: \"custom\", key: \"style\") {\n      __typename\n      value\n    }\n    styleSm: metafield(namespace: \"custom\", key: \"style_sm\") {\n      __typename\n      value\n    }\n    styleMd: metafield(namespace: \"custom\", key: \"style_md\") {\n      __typename\n      value\n    }\n    styleLg: metafield(namespace: \"custom\", key: \"style_lg\") {\n      __typename\n      value\n    }\n    styleXl: metafield(namespace: \"custom\", key: \"style_xl\") {\n      __typename\n      value\n    }\n    mediaImages: metafield(namespace: \"custom\", key: \"images\") {\n      value\n      references(first: 16) {\n        edges {\n          node {\n            __typename\n            ... on MediaImage {\n              id\n              image {\n                ...image\n              }\n            }\n          }\n        }\n      }\n    }\n    mediaVideos: metafield(namespace: \"custom\", key: \"videos\") {\n      value\n      references(first: 16) {\n        edges {\n          node {\n            __typename\n            ...video\n          }\n        }\n      }\n    }\n    sections: metafield(namespace: \"custom\", key: \"page_section_module\") {\n      references(first: 16) {\n        __typename\n        nodes {\n          __typename\n          ...pageSectionModule\n        }\n      }\n    }\n  }\n": types.PageFragmentDoc,
    "\n  fragment pageSectionModule on Metaobject {\n    handle\n    id\n    type\n    updatedAt\n    fields {\n      __typename\n      key\n      type\n      value\n      reference {\n        __typename\n        ... on MediaImage {\n          id\n          image {\n            ...image\n          }\n        }\n        ... on Metaobject {\n          handle\n          id\n          type\n          updatedAt\n        }\n      }\n      references(first: 16) {\n        edges {\n          node {\n            __typename\n            ... on MediaImage {\n              id\n              image {\n                ...image\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.PageSectionModuleFragmentDoc,
    "\n  fragment productBasic on Product {\n    __typename\n    availableForSale\n    collections(first: 250) {\n      edges {\n        node {\n          id\n          handle\n          title\n        }\n      }\n    }\n    compareAtPriceRange {\n      maxVariantPrice {\n        amount\n        currencyCode\n      }\n      minVariantPrice {\n        amount\n        currencyCode\n      }\n    }\n    featuredImage {\n      ...image\n    }\n    description\n    descriptionHtml\n    handle\n    id\n    images(first: 1) {\n      edges {\n        node {\n          ...image\n        }\n      }\n    }\n    media(first: 10) {\n      edges {\n        node {\n          __typename\n          ...video\n        }\n      }\n    }\n    options {\n      id\n      name\n      values\n    }\n    priceRange {\n      maxVariantPrice {\n        amount\n        currencyCode\n      }\n      minVariantPrice {\n        amount\n        currencyCode\n      }\n    }\n    requiresSellingPlan\n    sellingPlanGroups(first: 1) {\n      edges {\n        node {\n          name\n          options {\n            name\n            values\n          }\n          sellingPlans(first: 3) {\n            edges {\n              node {\n                id\n                name\n                description\n                recurringDeliveries\n                options {\n                  name\n                  value\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    tags\n    title\n    seo {\n      ...seo\n    }\n    updatedAt\n    variants(first: 250) {\n      ...productVariantConnection\n    }\n    vendor\n  }\n": types.ProductBasicFragmentDoc,
    "\n  fragment productDetails on Product {\n    __typename\n    availableForSale\n    collections(first: 250) {\n      edges {\n        node {\n          id\n          handle\n          title\n        }\n      }\n    }\n    compareAtPriceRange {\n      maxVariantPrice {\n        amount\n        currencyCode\n      }\n      minVariantPrice {\n        amount\n        currencyCode\n      }\n    }\n    featuredImage {\n      ...image\n    }\n    images(first: 16) {\n      edges {\n        node {\n          ...image\n        }\n      }\n    }\n    description\n    descriptionHtml\n    handle\n    id\n    media(first: 8) {\n      edges {\n        node {\n          __typename\n          ...video\n        }\n      }\n    }\n    metafields(\n      identifiers: [\n        { namespace: \"custom\", key: \"details\" }\n        { namespace: \"custom\", key: \"inspiration\" }\n        { namespace: \"custom\", key: \"sizing\" }\n        { namespace: \"custom\", key: \"line\" }\n        { namespace: \"custom\", key: \"component\" }\n        { namespace: \"custom\", key: \"fabric\" }\n        { namespace: \"custom\", key: \"model\" }\n        { namespace: \"custom\", key: \"shape\" }\n        { namespace: \"descriptors\", key: \"care_guide\" }\n        {\n          namespace: \"shopify--discovery--product_recommendation\"\n          key: \"complementary_products\"\n        }\n        {\n          namespace: \"shopify--discovery--product_recommendation\"\n          key: \"related_products\"\n        }\n      ]\n    ) {\n      ...productMetafield\n    }\n    openGraphImage: metafield(namespace: \"custom\", key: \"open_graph_image\") {\n      __typename\n      reference {\n        ... on MediaImage {\n          __typename\n          id\n          image {\n            ...image\n          }\n        }\n      }\n    }\n    options {\n      id\n      name\n      values\n    }\n    priceRange {\n      maxVariantPrice {\n        amount\n        currencyCode\n      }\n      minVariantPrice {\n        amount\n        currencyCode\n      }\n    }\n    productType\n    release_date: metafield(namespace: \"custom\", key: \"release_date\") {\n      ...productMetafield\n    }\n    requiresSellingPlan\n    sellingPlanGroups(first: 1) {\n      edges {\n        node {\n          name\n          options {\n            name\n            values\n          }\n          sellingPlans(first: 3) {\n            edges {\n              node {\n                id\n                name\n                description\n                recurringDeliveries\n                options {\n                  name\n                  value\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    seo {\n      ...seo\n    }\n    tags\n    title\n    updatedAt\n    variants(first: 250) {\n      ...productVariantConnection\n    }\n    vendor\n  }\n": types.ProductDetailsFragmentDoc,
    "\n  fragment productMetafield on Metafield {\n    description\n    id\n    key\n    namespace\n    reference {\n      ... on MetafieldReference {\n        ... on Page {\n          body\n          handle\n          onlineStoreUrl\n          title\n        }\n        ... on Metaobject {\n          id\n          type\n          fields {\n            key\n            type\n            value\n          }\n        }\n      }\n    }\n    references(first: 16) {\n      nodes {\n        ... on MetafieldReference {\n          ... on Page {\n            body\n            handle\n            onlineStoreUrl\n            title\n          }\n          ... on Metaobject {\n            id\n            type\n            fields {\n              key\n              type\n              value\n              references(first: 8) {\n                nodes {\n                  ... on Metaobject {\n                    fields {\n                      key\n                      type\n                      value\n                      references(first: 8) {\n                        nodes {\n                          ... on Metaobject {\n                            fields {\n                              key\n                              type\n                              value\n                              references(first: 8) {\n                                nodes {\n                                  ... on Metaobject {\n                                    fields {\n                                      key\n                                      type\n                                      value\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    type\n    value\n  }\n": types.ProductMetafieldFragmentDoc,
    "\n  fragment productVariantConnection on ProductVariantConnection {\n    edges {\n      node {\n        availableForSale\n        id\n        image {\n          ...image\n        }\n        price {\n          amount\n          currencyCode\n        }\n        title\n        selectedOptions {\n          name\n          value\n        }\n      }\n    }\n  }\n": types.ProductVariantConnectionFragmentDoc,
    "\n  fragment productWithVariants on Product {\n    availableForSale\n    collections(first: 250) {\n      edges {\n        node {\n          id\n          handle\n          title\n        }\n      }\n    }\n    compareAtPriceRange {\n      maxVariantPrice {\n        amount\n        currencyCode\n      }\n      minVariantPrice {\n        amount\n        currencyCode\n      }\n    }\n    description\n    descriptionHtml\n    featuredImage {\n      ...image\n    }\n    handle\n    id\n    images(first: 20) {\n      edges {\n        node {\n          ...image\n        }\n      }\n    }\n    media(first: 10) {\n      edges {\n        node {\n          __typename\n          ...video\n        }\n      }\n    }\n    options {\n      id\n      name\n      values\n    }\n    priceRange {\n      maxVariantPrice {\n        amount\n        currencyCode\n      }\n      minVariantPrice {\n        amount\n        currencyCode\n      }\n    }\n    requiresSellingPlan\n    sellingPlanGroups(first: 1) {\n      edges {\n        node {\n          name\n          options {\n            name\n            values\n          }\n          sellingPlans(first: 3) {\n            edges {\n              node {\n                id\n                name\n                description\n                recurringDeliveries\n                options {\n                  name\n                  value\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    seo {\n      ...seo\n    }\n    tags\n    title\n    updatedAt\n    variants(first: 250) {\n      ...productVariantConnection\n    }\n    vendor\n  }\n": types.ProductWithVariantsFragmentDoc,
    "\n  fragment seo on SEO {\n    description\n    title\n  }\n": types.SeoFragmentDoc,
    "\n  fragment shopPolicy on ShopPolicy {\n    ... on ShopPolicy {\n      body\n      handle\n      id\n      title\n      url\n    }\n  }\n": types.ShopPolicyFragmentDoc,
    "\n  fragment video on Media {\n    ... on Video {\n      alt\n      id\n      mediaContentType\n      previewImage {\n        altText\n        id\n        url\n      }\n      sources {\n        format\n        height\n        mimeType\n        url\n        width\n      }\n    }\n  }\n": types.VideoFragmentDoc,
    "\n  mutation addToCart($cartId: ID!, $lines: [CartLineInput!]!) {\n    cartLinesAdd(cartId: $cartId, lines: $lines) {\n      cart {\n        ...cart\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n": types.AddToCartDocument,
    "\n  mutation cartBuyerIdentityUpdate(\n    $buyerIdentity: CartBuyerIdentityInput!\n    $cartId: ID!\n  ) {\n    cartBuyerIdentityUpdate(buyerIdentity: $buyerIdentity, cartId: $cartId) {\n      cart {\n        ...cart\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n": types.CartBuyerIdentityUpdateDocument,
    "\n  mutation createCart($input: CartInput!) {\n    cartCreate(input: $input) {\n      cart {\n        ...cart\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n": types.CreateCartDocument,
    "\n  mutation editCartItems($cartId: ID!, $lines: [CartLineUpdateInput!]!) {\n    cartLinesUpdate(cartId: $cartId, lines: $lines) {\n      cart {\n        ...cart\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n": types.EditCartItemsDocument,
    "\n  mutation removeFromCart($cartId: ID!, $lineIds: [ID!]!) {\n    cartLinesRemove(cartId: $cartId, lineIds: $lineIds) {\n      cart {\n        ...cart\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n": types.RemoveFromCartDocument,
    "\n  mutation CustomerAccessTokenCreate($input: CustomerAccessTokenCreateInput!) {\n    customerAccessTokenCreate(input: $input) {\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n": types.CustomerAccessTokenCreateDocument,
    "\n  mutation CustomerAccessTokenDelete($customerAccessToken: String!) {\n    customerAccessTokenDelete(customerAccessToken: $customerAccessToken) {\n      deletedAccessToken\n      deletedCustomerAccessTokenId\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n": types.CustomerAccessTokenDeleteDocument,
    "\n  mutation CustomerAddressCreate(\n    $address: MailingAddressInput!\n    $customerAccessToken: String!\n  ) {\n    customerAddressCreate(\n      address: $address\n      customerAccessToken: $customerAccessToken\n    ) {\n      customerAddress {\n        id\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n": types.CustomerAddressCreateDocument,
    "\n  mutation CustomerAddressDelete($customerAccessToken: String!, $id: ID!) {\n    customerAddressDelete(customerAccessToken: $customerAccessToken, id: $id) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      deletedCustomerAddressId\n    }\n  }\n": types.CustomerAddressDeleteDocument,
    "\n  mutation CustomerAddressUpdate(\n    $address: MailingAddressInput!\n    $customerAccessToken: String!\n    $id: ID!\n  ) {\n    customerAddressUpdate(\n      address: $address\n      customerAccessToken: $customerAccessToken\n      id: $id\n    ) {\n      customerAddress {\n        id\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n": types.CustomerAddressUpdateDocument,
    "\n  mutation CustomerCreate($input: CustomerCreateInput!) {\n    customerCreate(input: $input) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      customer {\n        id\n      }\n    }\n  }\n": types.CustomerCreateDocument,
    "\n  mutation CustomerDefaultAddressUpdate(\n    $id: ID!\n    $customerAccessToken: String!\n  ) {\n    customerDefaultAddressUpdate(\n      addressId: $id\n      customerAccessToken: $customerAccessToken\n    ) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n": types.CustomerDefaultAddressUpdateDocument,
    "\n  mutation CustomerRecover($email: String!) {\n    customerRecover(email: $email) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n": types.CustomerRecoverDocument,
    "\n  mutation CustomerResetPassword($id: ID!, $input: CustomerResetInput!) {\n    customerReset(id: $id, input: $input) {\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n": types.CustomerResetPasswordDocument,
    "\n  mutation CustomerResetPasswordByUrl($password: String!, $resetUrl: URL!) {\n    customerResetByUrl(password: $password, resetUrl: $resetUrl) {\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n": types.CustomerResetPasswordByUrlDocument,
    "\n  mutation CustomerUpdate(\n    $customerAccessToken: String!\n    $input: CustomerUpdateInput!\n  ) {\n    customerUpdate(\n      customerAccessToken: $customerAccessToken\n      customer: $input\n    ) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      customer {\n        ...customer\n      }\n    }\n  }\n": types.CustomerUpdateDocument,
    "\n  query blogArticle(\n    $country: CountryCode\n    $articleHandle: String!\n    $blogHandle: String!\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    blog(handle: $blogHandle) {\n      articleByHandle(handle: $articleHandle) {\n        contentHtml\n        excerptHtml\n        id\n        title\n      }\n    }\n  }\n": types.BlogArticleDocument,
    "\n  query cart($cartId: ID!) {\n    cart(id: $cartId) {\n      ...cart\n    }\n  }\n": types.CartDocument,
    "\n  query collection(\n    $country: CountryCode\n    $handle: String!\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    collection(handle: $handle) {\n      ...collection\n    }\n  }\n": types.CollectionDocument,
    "\n  query collections(\n    $country: CountryCode\n    $first: Int = 100\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    collections(first: $first, sortKey: TITLE) {\n      edges {\n        node {\n          ...collection\n        }\n      }\n    }\n  }\n": types.CollectionsDocument,
    "\n  query collectionWithProducts(\n    $country: CountryCode\n    $first: Int = 100\n    $handle: String!\n    $language: LanguageCode\n    $reverse: Boolean\n    $sortKey: ProductCollectionSortKeys\n  ) @inContext(country: $country, language: $language) {\n    collection(handle: $handle) {\n      products(sortKey: $sortKey, reverse: $reverse, first: $first) {\n        edges {\n          node {\n            ...productBasic\n          }\n        }\n      }\n    }\n  }\n": types.CollectionWithProductsDocument,
    "\n  query customerCare(\n    $country: CountryCode\n    $handle: String!\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    metaobject(handle: { type: \"customer_care\", handle: $handle }) {\n      handle\n      updatedAt\n      fields {\n        __typename\n        key\n        value\n        reference {\n          __typename\n          ... on MediaImage {\n            alt\n            image {\n              ...image\n            }\n          }\n          ...video\n        }\n      }\n    }\n  }\n": types.CustomerCareDocument,
    "\n  query customer($customerAccessToken: String!) {\n    customer(customerAccessToken: $customerAccessToken) {\n      ...customer\n    }\n  }\n": types.CustomerDocument,
    "\n  query localizationDetails($country: CountryCode, $language: LanguageCode)\n  @inContext(country: $country, language: $language) {\n    localization {\n      availableCountries {\n        availableLanguages {\n          endonymName\n          isoCode\n          name\n        }\n        currency {\n          isoCode\n          name\n          symbol\n        }\n        isoCode\n        market {\n          handle\n          id\n        }\n        name\n        unitSystem\n      }\n      availableLanguages {\n        endonymName\n        isoCode\n        name\n      }\n      country {\n        availableLanguages {\n          endonymName\n          isoCode\n          name\n        }\n        currency {\n          isoCode\n          name\n          symbol\n        }\n        isoCode\n        market {\n          handle\n          id\n        }\n        name\n        unitSystem\n      }\n      language {\n        endonymName\n        isoCode\n        name\n      }\n      market {\n        handle\n        id\n      }\n    }\n  }\n": types.LocalizationDetailsDocument,
    "\n  query menu($country: CountryCode, $handle: String!, $language: LanguageCode)\n  @inContext(country: $country, language: $language) {\n    menu(handle: $handle) {\n      id\n      items {\n        id\n        title\n        url\n      }\n    }\n  }\n": types.MenuDocument,
    "\n  query metaObjects(\n    $country: CountryCode\n    $type: String!\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    metaobjects(first: 64, type: $type) {\n      edges {\n        node {\n          id\n          fields {\n            key\n            value\n          }\n        }\n      }\n    }\n  }\n": types.MetaObjectsDocument,
    "\n  query routeMetaObject(\n    $country: CountryCode\n    $handle: String!\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    metaobject(handle: { type: \"route\", handle: $handle }) {\n      handle\n      updatedAt\n      fields {\n        __typename\n        key\n        value\n        reference {\n          __typename\n          ... on MediaImage {\n            alt\n            image {\n              ...image\n            }\n          }\n          ...video\n        }\n      }\n    }\n  }\n": types.RouteMetaObjectDocument,
    "\n  query page($country: CountryCode, $handle: String!, $language: LanguageCode)\n  @inContext(country: $country, language: $language) {\n    page(handle: $handle) {\n      ...page\n    }\n  }\n": types.PageDocument,
    "\n  query pages(\n    $country: CountryCode\n    $first: Int! = 250\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    pages(first: $first) {\n      edges {\n        node {\n          ...page\n        }\n      }\n    }\n  }\n": types.PagesDocument,
    "\n  query productRecommendations(\n    $country: CountryCode\n    $productId: ID!\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    productRecommendations(productId: $productId) {\n      ...productBasic\n    }\n  }\n": types.ProductRecommendationsDocument,
    "\n  query productBasic(\n    $country: CountryCode\n    $handle: String!\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    product(handle: $handle) {\n      ...productBasic\n    }\n  }\n": types.ProductBasicDocument,
    "\n  query productDetailsByHandle(\n    $country: CountryCode\n    $handle: String!\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    product(handle: $handle) {\n      ...productDetails\n    }\n  }\n": types.ProductDetailsByHandleDocument,
    "\n  query productDetailsById(\n    $country: CountryCode\n    $id: ID!\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    product(id: $id) {\n      ...productDetails\n    }\n  }\n": types.ProductDetailsByIdDocument,
    "\n  query productVariantBySelectedOptions(\n    $country: CountryCode\n    $handle: String!\n    $language: LanguageCode\n    $selectedOptions: [SelectedOptionInput!]!\n  ) @inContext(country: $country, language: $language) {\n    product(handle: $handle) {\n      productType\n      variantBySelectedOptions(selectedOptions: $selectedOptions) {\n        availableForSale\n        id\n        image {\n          ...image\n        }\n        price {\n          amount\n          currencyCode\n        }\n        title\n        selectedOptions {\n          name\n          value\n        }\n        sku\n      }\n    }\n  }\n": types.ProductVariantBySelectedOptionsDocument,
    "\n  query products(\n    $country: CountryCode\n    $language: LanguageCode\n    $query: String\n    $reverse: Boolean\n    $sortKey: ProductSortKeys\n  ) @inContext(country: $country, language: $language) {\n    products(sortKey: $sortKey, reverse: $reverse, query: $query, first: 96) {\n      edges {\n        node {\n          ...productBasic\n        }\n      }\n    }\n  }\n": types.ProductsDocument,
    "\n  query productsWithVariants(\n    $country: CountryCode\n    $language: LanguageCode\n    $query: String\n    $reverse: Boolean\n    $sortKey: ProductSortKeys\n  ) @inContext(country: $country, language: $language) {\n    products(sortKey: $sortKey, reverse: $reverse, query: $query, first: 96) {\n      edges {\n        node {\n          ...productWithVariants\n        }\n      }\n    }\n  }\n": types.ProductsWithVariantsDocument,
    "\n  query getShopDetails($country: CountryCode, $language: LanguageCode)\n  @inContext(country: $country, language: $language) {\n    shop {\n      brand {\n        colors {\n          primary {\n            background\n            foreground\n          }\n          secondary {\n            background\n            foreground\n          }\n        }\n        coverImage {\n          alt\n          image {\n            altText\n            height\n            url\n            width\n          }\n        }\n        squareLogo {\n          alt\n          image {\n            altText\n            height\n            url\n            width\n          }\n        }\n        shortDescription\n        slogan\n      }\n      description\n      id\n      moneyFormat\n      name\n      paymentSettings {\n        acceptedCardBrands\n        cardVaultUrl\n        countryCode\n        currencyCode\n        enabledPresentmentCurrencies\n        shopifyPaymentsAccountId\n        supportedDigitalWallets\n      }\n      primaryDomain {\n        host\n        sslEnabled\n        url\n      }\n      shipsToCountries\n    }\n  }\n": types.GetShopDetailsDocument,
    "\n  query shopPolicies($country: CountryCode, $language: LanguageCode)\n  @inContext(country: $country, language: $language) {\n    shop {\n      privacyPolicy {\n        ...shopPolicy\n      }\n      refundPolicy {\n        ...shopPolicy\n      }\n      shippingPolicy {\n        ...shopPolicy\n      }\n      termsOfService {\n        ...shopPolicy\n      }\n    }\n  }\n": types.ShopPoliciesDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment cart on Cart {\n    id\n    checkoutUrl\n    cost {\n      subtotalAmount {\n        amount\n        currencyCode\n      }\n      totalAmount {\n        amount\n        currencyCode\n      }\n      totalTaxAmount {\n        amount\n        currencyCode\n      }\n    }\n    lines(first: 64) {\n      edges {\n        node {\n          cost {\n            amountPerQuantity {\n              amount\n              currencyCode\n            }\n            subtotalAmount {\n              amount\n              currencyCode\n            }\n            totalAmount {\n              amount\n              currencyCode\n            }\n          }\n          id\n          merchandise {\n            ... on ProductVariant {\n              id\n              product {\n                ...productBasic\n              }\n              title\n              selectedOptions {\n                name\n                value\n              }\n            }\n          }\n          quantity\n        }\n      }\n    }\n    totalQuantity\n  }\n"): (typeof documents)["\n  fragment cart on Cart {\n    id\n    checkoutUrl\n    cost {\n      subtotalAmount {\n        amount\n        currencyCode\n      }\n      totalAmount {\n        amount\n        currencyCode\n      }\n      totalTaxAmount {\n        amount\n        currencyCode\n      }\n    }\n    lines(first: 64) {\n      edges {\n        node {\n          cost {\n            amountPerQuantity {\n              amount\n              currencyCode\n            }\n            subtotalAmount {\n              amount\n              currencyCode\n            }\n            totalAmount {\n              amount\n              currencyCode\n            }\n          }\n          id\n          merchandise {\n            ... on ProductVariant {\n              id\n              product {\n                ...productBasic\n              }\n              title\n              selectedOptions {\n                name\n                value\n              }\n            }\n          }\n          quantity\n        }\n      }\n    }\n    totalQuantity\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment collection on Collection {\n    handle\n    title\n    description\n    seo {\n      ...seo\n    }\n    updatedAt\n  }\n"): (typeof documents)["\n  fragment collection on Collection {\n    handle\n    title\n    description\n    seo {\n      ...seo\n    }\n    updatedAt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment customer on Customer {\n    acceptsMarketing\n    addresses(first: 16) {\n      nodes {\n        ...mailingAddress\n      }\n    }\n    createdAt\n    dateOfBirth: metafield(namespace: \"facts\", key: \"birth_date\") {\n      ...metafield\n    }\n    defaultAddress {\n      ...mailingAddress\n    }\n    displayName\n    email\n    firstName\n    id\n    lastIncompleteCheckout {\n      id\n    }\n    lastName\n    numberOfOrders\n    orders(first: 16) {\n      nodes {\n        ...order\n      }\n    }\n    phone\n    tags\n    updatedAt\n  }\n"): (typeof documents)["\n  fragment customer on Customer {\n    acceptsMarketing\n    addresses(first: 16) {\n      nodes {\n        ...mailingAddress\n      }\n    }\n    createdAt\n    dateOfBirth: metafield(namespace: \"facts\", key: \"birth_date\") {\n      ...metafield\n    }\n    defaultAddress {\n      ...mailingAddress\n    }\n    displayName\n    email\n    firstName\n    id\n    lastIncompleteCheckout {\n      id\n    }\n    lastName\n    numberOfOrders\n    orders(first: 16) {\n      nodes {\n        ...order\n      }\n    }\n    phone\n    tags\n    updatedAt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment image on Image {\n    altText\n    blurDataURL: url(transform: { crop: CENTER, maxWidth: 200 })\n    height\n    id\n    url\n    width\n  }\n"): (typeof documents)["\n  fragment image on Image {\n    altText\n    blurDataURL: url(transform: { crop: CENTER, maxWidth: 200 })\n    height\n    id\n    url\n    width\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment mailingAddress on MailingAddress {\n    address1\n    address2\n    city\n    company\n    country\n    countryCodeV2\n    firstName\n    formatted\n    formattedArea\n    id\n    lastName\n    name\n    phone\n    province\n    provinceCode\n    zip\n  }\n"): (typeof documents)["\n  fragment mailingAddress on MailingAddress {\n    address1\n    address2\n    city\n    company\n    country\n    countryCodeV2\n    firstName\n    formatted\n    formattedArea\n    id\n    lastName\n    name\n    phone\n    province\n    provinceCode\n    zip\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment metafield on Metafield {\n    value\n    id\n    key\n    namespace\n    type\n  }\n"): (typeof documents)["\n  fragment metafield on Metafield {\n    value\n    id\n    key\n    namespace\n    type\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment order on Order {\n    billingAddress {\n      ...mailingAddress\n    }\n    cancelReason\n    canceledAt\n    currencyCode\n    currentSubtotalPrice {\n      amount\n      currencyCode\n    }\n    currentTotalDuties {\n      amount\n      currencyCode\n    }\n    currentTotalPrice {\n      amount\n      currencyCode\n    }\n    customerLocale\n    customerUrl\n    edited\n    email\n    financialStatus\n    fulfillmentStatus\n    id\n    name\n    orderNumber\n    originalTotalDuties {\n      amount\n      currencyCode\n    }\n    originalTotalPrice {\n      amount\n      currencyCode\n    }\n    phone\n    processedAt\n    shippingAddress {\n      ...mailingAddress\n    }\n    shippingDiscountAllocations {\n      allocatedAmount {\n        amount\n        currencyCode\n      }\n      discountApplication {\n        allocationMethod\n        targetSelection\n        targetType\n        value {\n          ... on MoneyV2 {\n            amount\n            currencyCode\n          }\n          ... on PricingPercentageValue {\n            percentage\n          }\n        }\n      }\n    }\n    statusUrl\n    subtotalPrice {\n      amount\n      currencyCode\n    }\n    successfulFulfillments {\n      trackingCompany\n      trackingInfo {\n        number\n        url\n      }\n    }\n    totalPrice {\n      amount\n      currencyCode\n    }\n    totalRefunded {\n      amount\n      currencyCode\n    }\n    totalShippingPrice {\n      amount\n      currencyCode\n    }\n    totalTax {\n      amount\n      currencyCode\n    }\n  }\n"): (typeof documents)["\n  fragment order on Order {\n    billingAddress {\n      ...mailingAddress\n    }\n    cancelReason\n    canceledAt\n    currencyCode\n    currentSubtotalPrice {\n      amount\n      currencyCode\n    }\n    currentTotalDuties {\n      amount\n      currencyCode\n    }\n    currentTotalPrice {\n      amount\n      currencyCode\n    }\n    customerLocale\n    customerUrl\n    edited\n    email\n    financialStatus\n    fulfillmentStatus\n    id\n    name\n    orderNumber\n    originalTotalDuties {\n      amount\n      currencyCode\n    }\n    originalTotalPrice {\n      amount\n      currencyCode\n    }\n    phone\n    processedAt\n    shippingAddress {\n      ...mailingAddress\n    }\n    shippingDiscountAllocations {\n      allocatedAmount {\n        amount\n        currencyCode\n      }\n      discountApplication {\n        allocationMethod\n        targetSelection\n        targetType\n        value {\n          ... on MoneyV2 {\n            amount\n            currencyCode\n          }\n          ... on PricingPercentageValue {\n            percentage\n          }\n        }\n      }\n    }\n    statusUrl\n    subtotalPrice {\n      amount\n      currencyCode\n    }\n    successfulFulfillments {\n      trackingCompany\n      trackingInfo {\n        number\n        url\n      }\n    }\n    totalPrice {\n      amount\n      currencyCode\n    }\n    totalRefunded {\n      amount\n      currencyCode\n    }\n    totalShippingPrice {\n      amount\n      currencyCode\n    }\n    totalTax {\n      amount\n      currencyCode\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment page on Page {\n    id\n    title\n    handle\n    body\n    bodySummary\n    seo {\n      ...seo\n    }\n    createdAt\n    updatedAt\n    classes: metafield(namespace: \"custom\", key: \"classes\") {\n      __typename\n      value\n    }\n    style: metafield(namespace: \"custom\", key: \"style\") {\n      __typename\n      value\n    }\n    styleSm: metafield(namespace: \"custom\", key: \"style_sm\") {\n      __typename\n      value\n    }\n    styleMd: metafield(namespace: \"custom\", key: \"style_md\") {\n      __typename\n      value\n    }\n    styleLg: metafield(namespace: \"custom\", key: \"style_lg\") {\n      __typename\n      value\n    }\n    styleXl: metafield(namespace: \"custom\", key: \"style_xl\") {\n      __typename\n      value\n    }\n    mediaImages: metafield(namespace: \"custom\", key: \"images\") {\n      value\n      references(first: 16) {\n        edges {\n          node {\n            __typename\n            ... on MediaImage {\n              id\n              image {\n                ...image\n              }\n            }\n          }\n        }\n      }\n    }\n    mediaVideos: metafield(namespace: \"custom\", key: \"videos\") {\n      value\n      references(first: 16) {\n        edges {\n          node {\n            __typename\n            ...video\n          }\n        }\n      }\n    }\n    sections: metafield(namespace: \"custom\", key: \"page_section_module\") {\n      references(first: 16) {\n        __typename\n        nodes {\n          __typename\n          ...pageSectionModule\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment page on Page {\n    id\n    title\n    handle\n    body\n    bodySummary\n    seo {\n      ...seo\n    }\n    createdAt\n    updatedAt\n    classes: metafield(namespace: \"custom\", key: \"classes\") {\n      __typename\n      value\n    }\n    style: metafield(namespace: \"custom\", key: \"style\") {\n      __typename\n      value\n    }\n    styleSm: metafield(namespace: \"custom\", key: \"style_sm\") {\n      __typename\n      value\n    }\n    styleMd: metafield(namespace: \"custom\", key: \"style_md\") {\n      __typename\n      value\n    }\n    styleLg: metafield(namespace: \"custom\", key: \"style_lg\") {\n      __typename\n      value\n    }\n    styleXl: metafield(namespace: \"custom\", key: \"style_xl\") {\n      __typename\n      value\n    }\n    mediaImages: metafield(namespace: \"custom\", key: \"images\") {\n      value\n      references(first: 16) {\n        edges {\n          node {\n            __typename\n            ... on MediaImage {\n              id\n              image {\n                ...image\n              }\n            }\n          }\n        }\n      }\n    }\n    mediaVideos: metafield(namespace: \"custom\", key: \"videos\") {\n      value\n      references(first: 16) {\n        edges {\n          node {\n            __typename\n            ...video\n          }\n        }\n      }\n    }\n    sections: metafield(namespace: \"custom\", key: \"page_section_module\") {\n      references(first: 16) {\n        __typename\n        nodes {\n          __typename\n          ...pageSectionModule\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment pageSectionModule on Metaobject {\n    handle\n    id\n    type\n    updatedAt\n    fields {\n      __typename\n      key\n      type\n      value\n      reference {\n        __typename\n        ... on MediaImage {\n          id\n          image {\n            ...image\n          }\n        }\n        ... on Metaobject {\n          handle\n          id\n          type\n          updatedAt\n        }\n      }\n      references(first: 16) {\n        edges {\n          node {\n            __typename\n            ... on MediaImage {\n              id\n              image {\n                ...image\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment pageSectionModule on Metaobject {\n    handle\n    id\n    type\n    updatedAt\n    fields {\n      __typename\n      key\n      type\n      value\n      reference {\n        __typename\n        ... on MediaImage {\n          id\n          image {\n            ...image\n          }\n        }\n        ... on Metaobject {\n          handle\n          id\n          type\n          updatedAt\n        }\n      }\n      references(first: 16) {\n        edges {\n          node {\n            __typename\n            ... on MediaImage {\n              id\n              image {\n                ...image\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment productBasic on Product {\n    __typename\n    availableForSale\n    collections(first: 250) {\n      edges {\n        node {\n          id\n          handle\n          title\n        }\n      }\n    }\n    compareAtPriceRange {\n      maxVariantPrice {\n        amount\n        currencyCode\n      }\n      minVariantPrice {\n        amount\n        currencyCode\n      }\n    }\n    featuredImage {\n      ...image\n    }\n    description\n    descriptionHtml\n    handle\n    id\n    images(first: 1) {\n      edges {\n        node {\n          ...image\n        }\n      }\n    }\n    media(first: 10) {\n      edges {\n        node {\n          __typename\n          ...video\n        }\n      }\n    }\n    options {\n      id\n      name\n      values\n    }\n    priceRange {\n      maxVariantPrice {\n        amount\n        currencyCode\n      }\n      minVariantPrice {\n        amount\n        currencyCode\n      }\n    }\n    requiresSellingPlan\n    sellingPlanGroups(first: 1) {\n      edges {\n        node {\n          name\n          options {\n            name\n            values\n          }\n          sellingPlans(first: 3) {\n            edges {\n              node {\n                id\n                name\n                description\n                recurringDeliveries\n                options {\n                  name\n                  value\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    tags\n    title\n    seo {\n      ...seo\n    }\n    updatedAt\n    variants(first: 250) {\n      ...productVariantConnection\n    }\n    vendor\n  }\n"): (typeof documents)["\n  fragment productBasic on Product {\n    __typename\n    availableForSale\n    collections(first: 250) {\n      edges {\n        node {\n          id\n          handle\n          title\n        }\n      }\n    }\n    compareAtPriceRange {\n      maxVariantPrice {\n        amount\n        currencyCode\n      }\n      minVariantPrice {\n        amount\n        currencyCode\n      }\n    }\n    featuredImage {\n      ...image\n    }\n    description\n    descriptionHtml\n    handle\n    id\n    images(first: 1) {\n      edges {\n        node {\n          ...image\n        }\n      }\n    }\n    media(first: 10) {\n      edges {\n        node {\n          __typename\n          ...video\n        }\n      }\n    }\n    options {\n      id\n      name\n      values\n    }\n    priceRange {\n      maxVariantPrice {\n        amount\n        currencyCode\n      }\n      minVariantPrice {\n        amount\n        currencyCode\n      }\n    }\n    requiresSellingPlan\n    sellingPlanGroups(first: 1) {\n      edges {\n        node {\n          name\n          options {\n            name\n            values\n          }\n          sellingPlans(first: 3) {\n            edges {\n              node {\n                id\n                name\n                description\n                recurringDeliveries\n                options {\n                  name\n                  value\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    tags\n    title\n    seo {\n      ...seo\n    }\n    updatedAt\n    variants(first: 250) {\n      ...productVariantConnection\n    }\n    vendor\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment productDetails on Product {\n    __typename\n    availableForSale\n    collections(first: 250) {\n      edges {\n        node {\n          id\n          handle\n          title\n        }\n      }\n    }\n    compareAtPriceRange {\n      maxVariantPrice {\n        amount\n        currencyCode\n      }\n      minVariantPrice {\n        amount\n        currencyCode\n      }\n    }\n    featuredImage {\n      ...image\n    }\n    images(first: 16) {\n      edges {\n        node {\n          ...image\n        }\n      }\n    }\n    description\n    descriptionHtml\n    handle\n    id\n    media(first: 8) {\n      edges {\n        node {\n          __typename\n          ...video\n        }\n      }\n    }\n    metafields(\n      identifiers: [\n        { namespace: \"custom\", key: \"details\" }\n        { namespace: \"custom\", key: \"inspiration\" }\n        { namespace: \"custom\", key: \"sizing\" }\n        { namespace: \"custom\", key: \"line\" }\n        { namespace: \"custom\", key: \"component\" }\n        { namespace: \"custom\", key: \"fabric\" }\n        { namespace: \"custom\", key: \"model\" }\n        { namespace: \"custom\", key: \"shape\" }\n        { namespace: \"descriptors\", key: \"care_guide\" }\n        {\n          namespace: \"shopify--discovery--product_recommendation\"\n          key: \"complementary_products\"\n        }\n        {\n          namespace: \"shopify--discovery--product_recommendation\"\n          key: \"related_products\"\n        }\n      ]\n    ) {\n      ...productMetafield\n    }\n    openGraphImage: metafield(namespace: \"custom\", key: \"open_graph_image\") {\n      __typename\n      reference {\n        ... on MediaImage {\n          __typename\n          id\n          image {\n            ...image\n          }\n        }\n      }\n    }\n    options {\n      id\n      name\n      values\n    }\n    priceRange {\n      maxVariantPrice {\n        amount\n        currencyCode\n      }\n      minVariantPrice {\n        amount\n        currencyCode\n      }\n    }\n    productType\n    release_date: metafield(namespace: \"custom\", key: \"release_date\") {\n      ...productMetafield\n    }\n    requiresSellingPlan\n    sellingPlanGroups(first: 1) {\n      edges {\n        node {\n          name\n          options {\n            name\n            values\n          }\n          sellingPlans(first: 3) {\n            edges {\n              node {\n                id\n                name\n                description\n                recurringDeliveries\n                options {\n                  name\n                  value\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    seo {\n      ...seo\n    }\n    tags\n    title\n    updatedAt\n    variants(first: 250) {\n      ...productVariantConnection\n    }\n    vendor\n  }\n"): (typeof documents)["\n  fragment productDetails on Product {\n    __typename\n    availableForSale\n    collections(first: 250) {\n      edges {\n        node {\n          id\n          handle\n          title\n        }\n      }\n    }\n    compareAtPriceRange {\n      maxVariantPrice {\n        amount\n        currencyCode\n      }\n      minVariantPrice {\n        amount\n        currencyCode\n      }\n    }\n    featuredImage {\n      ...image\n    }\n    images(first: 16) {\n      edges {\n        node {\n          ...image\n        }\n      }\n    }\n    description\n    descriptionHtml\n    handle\n    id\n    media(first: 8) {\n      edges {\n        node {\n          __typename\n          ...video\n        }\n      }\n    }\n    metafields(\n      identifiers: [\n        { namespace: \"custom\", key: \"details\" }\n        { namespace: \"custom\", key: \"inspiration\" }\n        { namespace: \"custom\", key: \"sizing\" }\n        { namespace: \"custom\", key: \"line\" }\n        { namespace: \"custom\", key: \"component\" }\n        { namespace: \"custom\", key: \"fabric\" }\n        { namespace: \"custom\", key: \"model\" }\n        { namespace: \"custom\", key: \"shape\" }\n        { namespace: \"descriptors\", key: \"care_guide\" }\n        {\n          namespace: \"shopify--discovery--product_recommendation\"\n          key: \"complementary_products\"\n        }\n        {\n          namespace: \"shopify--discovery--product_recommendation\"\n          key: \"related_products\"\n        }\n      ]\n    ) {\n      ...productMetafield\n    }\n    openGraphImage: metafield(namespace: \"custom\", key: \"open_graph_image\") {\n      __typename\n      reference {\n        ... on MediaImage {\n          __typename\n          id\n          image {\n            ...image\n          }\n        }\n      }\n    }\n    options {\n      id\n      name\n      values\n    }\n    priceRange {\n      maxVariantPrice {\n        amount\n        currencyCode\n      }\n      minVariantPrice {\n        amount\n        currencyCode\n      }\n    }\n    productType\n    release_date: metafield(namespace: \"custom\", key: \"release_date\") {\n      ...productMetafield\n    }\n    requiresSellingPlan\n    sellingPlanGroups(first: 1) {\n      edges {\n        node {\n          name\n          options {\n            name\n            values\n          }\n          sellingPlans(first: 3) {\n            edges {\n              node {\n                id\n                name\n                description\n                recurringDeliveries\n                options {\n                  name\n                  value\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    seo {\n      ...seo\n    }\n    tags\n    title\n    updatedAt\n    variants(first: 250) {\n      ...productVariantConnection\n    }\n    vendor\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment productMetafield on Metafield {\n    description\n    id\n    key\n    namespace\n    reference {\n      ... on MetafieldReference {\n        ... on Page {\n          body\n          handle\n          onlineStoreUrl\n          title\n        }\n        ... on Metaobject {\n          id\n          type\n          fields {\n            key\n            type\n            value\n          }\n        }\n      }\n    }\n    references(first: 16) {\n      nodes {\n        ... on MetafieldReference {\n          ... on Page {\n            body\n            handle\n            onlineStoreUrl\n            title\n          }\n          ... on Metaobject {\n            id\n            type\n            fields {\n              key\n              type\n              value\n              references(first: 8) {\n                nodes {\n                  ... on Metaobject {\n                    fields {\n                      key\n                      type\n                      value\n                      references(first: 8) {\n                        nodes {\n                          ... on Metaobject {\n                            fields {\n                              key\n                              type\n                              value\n                              references(first: 8) {\n                                nodes {\n                                  ... on Metaobject {\n                                    fields {\n                                      key\n                                      type\n                                      value\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    type\n    value\n  }\n"): (typeof documents)["\n  fragment productMetafield on Metafield {\n    description\n    id\n    key\n    namespace\n    reference {\n      ... on MetafieldReference {\n        ... on Page {\n          body\n          handle\n          onlineStoreUrl\n          title\n        }\n        ... on Metaobject {\n          id\n          type\n          fields {\n            key\n            type\n            value\n          }\n        }\n      }\n    }\n    references(first: 16) {\n      nodes {\n        ... on MetafieldReference {\n          ... on Page {\n            body\n            handle\n            onlineStoreUrl\n            title\n          }\n          ... on Metaobject {\n            id\n            type\n            fields {\n              key\n              type\n              value\n              references(first: 8) {\n                nodes {\n                  ... on Metaobject {\n                    fields {\n                      key\n                      type\n                      value\n                      references(first: 8) {\n                        nodes {\n                          ... on Metaobject {\n                            fields {\n                              key\n                              type\n                              value\n                              references(first: 8) {\n                                nodes {\n                                  ... on Metaobject {\n                                    fields {\n                                      key\n                                      type\n                                      value\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    type\n    value\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment productVariantConnection on ProductVariantConnection {\n    edges {\n      node {\n        availableForSale\n        id\n        image {\n          ...image\n        }\n        price {\n          amount\n          currencyCode\n        }\n        title\n        selectedOptions {\n          name\n          value\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment productVariantConnection on ProductVariantConnection {\n    edges {\n      node {\n        availableForSale\n        id\n        image {\n          ...image\n        }\n        price {\n          amount\n          currencyCode\n        }\n        title\n        selectedOptions {\n          name\n          value\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment productWithVariants on Product {\n    availableForSale\n    collections(first: 250) {\n      edges {\n        node {\n          id\n          handle\n          title\n        }\n      }\n    }\n    compareAtPriceRange {\n      maxVariantPrice {\n        amount\n        currencyCode\n      }\n      minVariantPrice {\n        amount\n        currencyCode\n      }\n    }\n    description\n    descriptionHtml\n    featuredImage {\n      ...image\n    }\n    handle\n    id\n    images(first: 20) {\n      edges {\n        node {\n          ...image\n        }\n      }\n    }\n    media(first: 10) {\n      edges {\n        node {\n          __typename\n          ...video\n        }\n      }\n    }\n    options {\n      id\n      name\n      values\n    }\n    priceRange {\n      maxVariantPrice {\n        amount\n        currencyCode\n      }\n      minVariantPrice {\n        amount\n        currencyCode\n      }\n    }\n    requiresSellingPlan\n    sellingPlanGroups(first: 1) {\n      edges {\n        node {\n          name\n          options {\n            name\n            values\n          }\n          sellingPlans(first: 3) {\n            edges {\n              node {\n                id\n                name\n                description\n                recurringDeliveries\n                options {\n                  name\n                  value\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    seo {\n      ...seo\n    }\n    tags\n    title\n    updatedAt\n    variants(first: 250) {\n      ...productVariantConnection\n    }\n    vendor\n  }\n"): (typeof documents)["\n  fragment productWithVariants on Product {\n    availableForSale\n    collections(first: 250) {\n      edges {\n        node {\n          id\n          handle\n          title\n        }\n      }\n    }\n    compareAtPriceRange {\n      maxVariantPrice {\n        amount\n        currencyCode\n      }\n      minVariantPrice {\n        amount\n        currencyCode\n      }\n    }\n    description\n    descriptionHtml\n    featuredImage {\n      ...image\n    }\n    handle\n    id\n    images(first: 20) {\n      edges {\n        node {\n          ...image\n        }\n      }\n    }\n    media(first: 10) {\n      edges {\n        node {\n          __typename\n          ...video\n        }\n      }\n    }\n    options {\n      id\n      name\n      values\n    }\n    priceRange {\n      maxVariantPrice {\n        amount\n        currencyCode\n      }\n      minVariantPrice {\n        amount\n        currencyCode\n      }\n    }\n    requiresSellingPlan\n    sellingPlanGroups(first: 1) {\n      edges {\n        node {\n          name\n          options {\n            name\n            values\n          }\n          sellingPlans(first: 3) {\n            edges {\n              node {\n                id\n                name\n                description\n                recurringDeliveries\n                options {\n                  name\n                  value\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    seo {\n      ...seo\n    }\n    tags\n    title\n    updatedAt\n    variants(first: 250) {\n      ...productVariantConnection\n    }\n    vendor\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment seo on SEO {\n    description\n    title\n  }\n"): (typeof documents)["\n  fragment seo on SEO {\n    description\n    title\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment shopPolicy on ShopPolicy {\n    ... on ShopPolicy {\n      body\n      handle\n      id\n      title\n      url\n    }\n  }\n"): (typeof documents)["\n  fragment shopPolicy on ShopPolicy {\n    ... on ShopPolicy {\n      body\n      handle\n      id\n      title\n      url\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment video on Media {\n    ... on Video {\n      alt\n      id\n      mediaContentType\n      previewImage {\n        altText\n        id\n        url\n      }\n      sources {\n        format\n        height\n        mimeType\n        url\n        width\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment video on Media {\n    ... on Video {\n      alt\n      id\n      mediaContentType\n      previewImage {\n        altText\n        id\n        url\n      }\n      sources {\n        format\n        height\n        mimeType\n        url\n        width\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation addToCart($cartId: ID!, $lines: [CartLineInput!]!) {\n    cartLinesAdd(cartId: $cartId, lines: $lines) {\n      cart {\n        ...cart\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation addToCart($cartId: ID!, $lines: [CartLineInput!]!) {\n    cartLinesAdd(cartId: $cartId, lines: $lines) {\n      cart {\n        ...cart\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation cartBuyerIdentityUpdate(\n    $buyerIdentity: CartBuyerIdentityInput!\n    $cartId: ID!\n  ) {\n    cartBuyerIdentityUpdate(buyerIdentity: $buyerIdentity, cartId: $cartId) {\n      cart {\n        ...cart\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation cartBuyerIdentityUpdate(\n    $buyerIdentity: CartBuyerIdentityInput!\n    $cartId: ID!\n  ) {\n    cartBuyerIdentityUpdate(buyerIdentity: $buyerIdentity, cartId: $cartId) {\n      cart {\n        ...cart\n      }\n      userErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation createCart($input: CartInput!) {\n    cartCreate(input: $input) {\n      cart {\n        ...cart\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation createCart($input: CartInput!) {\n    cartCreate(input: $input) {\n      cart {\n        ...cart\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation editCartItems($cartId: ID!, $lines: [CartLineUpdateInput!]!) {\n    cartLinesUpdate(cartId: $cartId, lines: $lines) {\n      cart {\n        ...cart\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation editCartItems($cartId: ID!, $lines: [CartLineUpdateInput!]!) {\n    cartLinesUpdate(cartId: $cartId, lines: $lines) {\n      cart {\n        ...cart\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation removeFromCart($cartId: ID!, $lineIds: [ID!]!) {\n    cartLinesRemove(cartId: $cartId, lineIds: $lineIds) {\n      cart {\n        ...cart\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation removeFromCart($cartId: ID!, $lineIds: [ID!]!) {\n    cartLinesRemove(cartId: $cartId, lineIds: $lineIds) {\n      cart {\n        ...cart\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CustomerAccessTokenCreate($input: CustomerAccessTokenCreateInput!) {\n    customerAccessTokenCreate(input: $input) {\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CustomerAccessTokenCreate($input: CustomerAccessTokenCreateInput!) {\n    customerAccessTokenCreate(input: $input) {\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CustomerAccessTokenDelete($customerAccessToken: String!) {\n    customerAccessTokenDelete(customerAccessToken: $customerAccessToken) {\n      deletedAccessToken\n      deletedCustomerAccessTokenId\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CustomerAccessTokenDelete($customerAccessToken: String!) {\n    customerAccessTokenDelete(customerAccessToken: $customerAccessToken) {\n      deletedAccessToken\n      deletedCustomerAccessTokenId\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CustomerAddressCreate(\n    $address: MailingAddressInput!\n    $customerAccessToken: String!\n  ) {\n    customerAddressCreate(\n      address: $address\n      customerAccessToken: $customerAccessToken\n    ) {\n      customerAddress {\n        id\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CustomerAddressCreate(\n    $address: MailingAddressInput!\n    $customerAccessToken: String!\n  ) {\n    customerAddressCreate(\n      address: $address\n      customerAccessToken: $customerAccessToken\n    ) {\n      customerAddress {\n        id\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CustomerAddressDelete($customerAccessToken: String!, $id: ID!) {\n    customerAddressDelete(customerAccessToken: $customerAccessToken, id: $id) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      deletedCustomerAddressId\n    }\n  }\n"): (typeof documents)["\n  mutation CustomerAddressDelete($customerAccessToken: String!, $id: ID!) {\n    customerAddressDelete(customerAccessToken: $customerAccessToken, id: $id) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      deletedCustomerAddressId\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CustomerAddressUpdate(\n    $address: MailingAddressInput!\n    $customerAccessToken: String!\n    $id: ID!\n  ) {\n    customerAddressUpdate(\n      address: $address\n      customerAccessToken: $customerAccessToken\n      id: $id\n    ) {\n      customerAddress {\n        id\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CustomerAddressUpdate(\n    $address: MailingAddressInput!\n    $customerAccessToken: String!\n    $id: ID!\n  ) {\n    customerAddressUpdate(\n      address: $address\n      customerAccessToken: $customerAccessToken\n      id: $id\n    ) {\n      customerAddress {\n        id\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CustomerCreate($input: CustomerCreateInput!) {\n    customerCreate(input: $input) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      customer {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CustomerCreate($input: CustomerCreateInput!) {\n    customerCreate(input: $input) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      customer {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CustomerDefaultAddressUpdate(\n    $id: ID!\n    $customerAccessToken: String!\n  ) {\n    customerDefaultAddressUpdate(\n      addressId: $id\n      customerAccessToken: $customerAccessToken\n    ) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CustomerDefaultAddressUpdate(\n    $id: ID!\n    $customerAccessToken: String!\n  ) {\n    customerDefaultAddressUpdate(\n      addressId: $id\n      customerAccessToken: $customerAccessToken\n    ) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CustomerRecover($email: String!) {\n    customerRecover(email: $email) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CustomerRecover($email: String!) {\n    customerRecover(email: $email) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CustomerResetPassword($id: ID!, $input: CustomerResetInput!) {\n    customerReset(id: $id, input: $input) {\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CustomerResetPassword($id: ID!, $input: CustomerResetInput!) {\n    customerReset(id: $id, input: $input) {\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CustomerResetPasswordByUrl($password: String!, $resetUrl: URL!) {\n    customerResetByUrl(password: $password, resetUrl: $resetUrl) {\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CustomerResetPasswordByUrl($password: String!, $resetUrl: URL!) {\n    customerResetByUrl(password: $password, resetUrl: $resetUrl) {\n      customerAccessToken {\n        accessToken\n        expiresAt\n      }\n      customerUserErrors {\n        code\n        field\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CustomerUpdate(\n    $customerAccessToken: String!\n    $input: CustomerUpdateInput!\n  ) {\n    customerUpdate(\n      customerAccessToken: $customerAccessToken\n      customer: $input\n    ) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      customer {\n        ...customer\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CustomerUpdate(\n    $customerAccessToken: String!\n    $input: CustomerUpdateInput!\n  ) {\n    customerUpdate(\n      customerAccessToken: $customerAccessToken\n      customer: $input\n    ) {\n      customerUserErrors {\n        code\n        field\n        message\n      }\n      customer {\n        ...customer\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query blogArticle(\n    $country: CountryCode\n    $articleHandle: String!\n    $blogHandle: String!\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    blog(handle: $blogHandle) {\n      articleByHandle(handle: $articleHandle) {\n        contentHtml\n        excerptHtml\n        id\n        title\n      }\n    }\n  }\n"): (typeof documents)["\n  query blogArticle(\n    $country: CountryCode\n    $articleHandle: String!\n    $blogHandle: String!\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    blog(handle: $blogHandle) {\n      articleByHandle(handle: $articleHandle) {\n        contentHtml\n        excerptHtml\n        id\n        title\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query cart($cartId: ID!) {\n    cart(id: $cartId) {\n      ...cart\n    }\n  }\n"): (typeof documents)["\n  query cart($cartId: ID!) {\n    cart(id: $cartId) {\n      ...cart\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query collection(\n    $country: CountryCode\n    $handle: String!\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    collection(handle: $handle) {\n      ...collection\n    }\n  }\n"): (typeof documents)["\n  query collection(\n    $country: CountryCode\n    $handle: String!\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    collection(handle: $handle) {\n      ...collection\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query collections(\n    $country: CountryCode\n    $first: Int = 100\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    collections(first: $first, sortKey: TITLE) {\n      edges {\n        node {\n          ...collection\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query collections(\n    $country: CountryCode\n    $first: Int = 100\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    collections(first: $first, sortKey: TITLE) {\n      edges {\n        node {\n          ...collection\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query collectionWithProducts(\n    $country: CountryCode\n    $first: Int = 100\n    $handle: String!\n    $language: LanguageCode\n    $reverse: Boolean\n    $sortKey: ProductCollectionSortKeys\n  ) @inContext(country: $country, language: $language) {\n    collection(handle: $handle) {\n      products(sortKey: $sortKey, reverse: $reverse, first: $first) {\n        edges {\n          node {\n            ...productBasic\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query collectionWithProducts(\n    $country: CountryCode\n    $first: Int = 100\n    $handle: String!\n    $language: LanguageCode\n    $reverse: Boolean\n    $sortKey: ProductCollectionSortKeys\n  ) @inContext(country: $country, language: $language) {\n    collection(handle: $handle) {\n      products(sortKey: $sortKey, reverse: $reverse, first: $first) {\n        edges {\n          node {\n            ...productBasic\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query customerCare(\n    $country: CountryCode\n    $handle: String!\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    metaobject(handle: { type: \"customer_care\", handle: $handle }) {\n      handle\n      updatedAt\n      fields {\n        __typename\n        key\n        value\n        reference {\n          __typename\n          ... on MediaImage {\n            alt\n            image {\n              ...image\n            }\n          }\n          ...video\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query customerCare(\n    $country: CountryCode\n    $handle: String!\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    metaobject(handle: { type: \"customer_care\", handle: $handle }) {\n      handle\n      updatedAt\n      fields {\n        __typename\n        key\n        value\n        reference {\n          __typename\n          ... on MediaImage {\n            alt\n            image {\n              ...image\n            }\n          }\n          ...video\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query customer($customerAccessToken: String!) {\n    customer(customerAccessToken: $customerAccessToken) {\n      ...customer\n    }\n  }\n"): (typeof documents)["\n  query customer($customerAccessToken: String!) {\n    customer(customerAccessToken: $customerAccessToken) {\n      ...customer\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query localizationDetails($country: CountryCode, $language: LanguageCode)\n  @inContext(country: $country, language: $language) {\n    localization {\n      availableCountries {\n        availableLanguages {\n          endonymName\n          isoCode\n          name\n        }\n        currency {\n          isoCode\n          name\n          symbol\n        }\n        isoCode\n        market {\n          handle\n          id\n        }\n        name\n        unitSystem\n      }\n      availableLanguages {\n        endonymName\n        isoCode\n        name\n      }\n      country {\n        availableLanguages {\n          endonymName\n          isoCode\n          name\n        }\n        currency {\n          isoCode\n          name\n          symbol\n        }\n        isoCode\n        market {\n          handle\n          id\n        }\n        name\n        unitSystem\n      }\n      language {\n        endonymName\n        isoCode\n        name\n      }\n      market {\n        handle\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  query localizationDetails($country: CountryCode, $language: LanguageCode)\n  @inContext(country: $country, language: $language) {\n    localization {\n      availableCountries {\n        availableLanguages {\n          endonymName\n          isoCode\n          name\n        }\n        currency {\n          isoCode\n          name\n          symbol\n        }\n        isoCode\n        market {\n          handle\n          id\n        }\n        name\n        unitSystem\n      }\n      availableLanguages {\n        endonymName\n        isoCode\n        name\n      }\n      country {\n        availableLanguages {\n          endonymName\n          isoCode\n          name\n        }\n        currency {\n          isoCode\n          name\n          symbol\n        }\n        isoCode\n        market {\n          handle\n          id\n        }\n        name\n        unitSystem\n      }\n      language {\n        endonymName\n        isoCode\n        name\n      }\n      market {\n        handle\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query menu($country: CountryCode, $handle: String!, $language: LanguageCode)\n  @inContext(country: $country, language: $language) {\n    menu(handle: $handle) {\n      id\n      items {\n        id\n        title\n        url\n      }\n    }\n  }\n"): (typeof documents)["\n  query menu($country: CountryCode, $handle: String!, $language: LanguageCode)\n  @inContext(country: $country, language: $language) {\n    menu(handle: $handle) {\n      id\n      items {\n        id\n        title\n        url\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query metaObjects(\n    $country: CountryCode\n    $type: String!\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    metaobjects(first: 64, type: $type) {\n      edges {\n        node {\n          id\n          fields {\n            key\n            value\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query metaObjects(\n    $country: CountryCode\n    $type: String!\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    metaobjects(first: 64, type: $type) {\n      edges {\n        node {\n          id\n          fields {\n            key\n            value\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query routeMetaObject(\n    $country: CountryCode\n    $handle: String!\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    metaobject(handle: { type: \"route\", handle: $handle }) {\n      handle\n      updatedAt\n      fields {\n        __typename\n        key\n        value\n        reference {\n          __typename\n          ... on MediaImage {\n            alt\n            image {\n              ...image\n            }\n          }\n          ...video\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query routeMetaObject(\n    $country: CountryCode\n    $handle: String!\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    metaobject(handle: { type: \"route\", handle: $handle }) {\n      handle\n      updatedAt\n      fields {\n        __typename\n        key\n        value\n        reference {\n          __typename\n          ... on MediaImage {\n            alt\n            image {\n              ...image\n            }\n          }\n          ...video\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query page($country: CountryCode, $handle: String!, $language: LanguageCode)\n  @inContext(country: $country, language: $language) {\n    page(handle: $handle) {\n      ...page\n    }\n  }\n"): (typeof documents)["\n  query page($country: CountryCode, $handle: String!, $language: LanguageCode)\n  @inContext(country: $country, language: $language) {\n    page(handle: $handle) {\n      ...page\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query pages(\n    $country: CountryCode\n    $first: Int! = 250\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    pages(first: $first) {\n      edges {\n        node {\n          ...page\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query pages(\n    $country: CountryCode\n    $first: Int! = 250\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    pages(first: $first) {\n      edges {\n        node {\n          ...page\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query productRecommendations(\n    $country: CountryCode\n    $productId: ID!\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    productRecommendations(productId: $productId) {\n      ...productBasic\n    }\n  }\n"): (typeof documents)["\n  query productRecommendations(\n    $country: CountryCode\n    $productId: ID!\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    productRecommendations(productId: $productId) {\n      ...productBasic\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query productBasic(\n    $country: CountryCode\n    $handle: String!\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    product(handle: $handle) {\n      ...productBasic\n    }\n  }\n"): (typeof documents)["\n  query productBasic(\n    $country: CountryCode\n    $handle: String!\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    product(handle: $handle) {\n      ...productBasic\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query productDetailsByHandle(\n    $country: CountryCode\n    $handle: String!\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    product(handle: $handle) {\n      ...productDetails\n    }\n  }\n"): (typeof documents)["\n  query productDetailsByHandle(\n    $country: CountryCode\n    $handle: String!\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    product(handle: $handle) {\n      ...productDetails\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query productDetailsById(\n    $country: CountryCode\n    $id: ID!\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    product(id: $id) {\n      ...productDetails\n    }\n  }\n"): (typeof documents)["\n  query productDetailsById(\n    $country: CountryCode\n    $id: ID!\n    $language: LanguageCode\n  ) @inContext(country: $country, language: $language) {\n    product(id: $id) {\n      ...productDetails\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query productVariantBySelectedOptions(\n    $country: CountryCode\n    $handle: String!\n    $language: LanguageCode\n    $selectedOptions: [SelectedOptionInput!]!\n  ) @inContext(country: $country, language: $language) {\n    product(handle: $handle) {\n      productType\n      variantBySelectedOptions(selectedOptions: $selectedOptions) {\n        availableForSale\n        id\n        image {\n          ...image\n        }\n        price {\n          amount\n          currencyCode\n        }\n        title\n        selectedOptions {\n          name\n          value\n        }\n        sku\n      }\n    }\n  }\n"): (typeof documents)["\n  query productVariantBySelectedOptions(\n    $country: CountryCode\n    $handle: String!\n    $language: LanguageCode\n    $selectedOptions: [SelectedOptionInput!]!\n  ) @inContext(country: $country, language: $language) {\n    product(handle: $handle) {\n      productType\n      variantBySelectedOptions(selectedOptions: $selectedOptions) {\n        availableForSale\n        id\n        image {\n          ...image\n        }\n        price {\n          amount\n          currencyCode\n        }\n        title\n        selectedOptions {\n          name\n          value\n        }\n        sku\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query products(\n    $country: CountryCode\n    $language: LanguageCode\n    $query: String\n    $reverse: Boolean\n    $sortKey: ProductSortKeys\n  ) @inContext(country: $country, language: $language) {\n    products(sortKey: $sortKey, reverse: $reverse, query: $query, first: 96) {\n      edges {\n        node {\n          ...productBasic\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query products(\n    $country: CountryCode\n    $language: LanguageCode\n    $query: String\n    $reverse: Boolean\n    $sortKey: ProductSortKeys\n  ) @inContext(country: $country, language: $language) {\n    products(sortKey: $sortKey, reverse: $reverse, query: $query, first: 96) {\n      edges {\n        node {\n          ...productBasic\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query productsWithVariants(\n    $country: CountryCode\n    $language: LanguageCode\n    $query: String\n    $reverse: Boolean\n    $sortKey: ProductSortKeys\n  ) @inContext(country: $country, language: $language) {\n    products(sortKey: $sortKey, reverse: $reverse, query: $query, first: 96) {\n      edges {\n        node {\n          ...productWithVariants\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query productsWithVariants(\n    $country: CountryCode\n    $language: LanguageCode\n    $query: String\n    $reverse: Boolean\n    $sortKey: ProductSortKeys\n  ) @inContext(country: $country, language: $language) {\n    products(sortKey: $sortKey, reverse: $reverse, query: $query, first: 96) {\n      edges {\n        node {\n          ...productWithVariants\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getShopDetails($country: CountryCode, $language: LanguageCode)\n  @inContext(country: $country, language: $language) {\n    shop {\n      brand {\n        colors {\n          primary {\n            background\n            foreground\n          }\n          secondary {\n            background\n            foreground\n          }\n        }\n        coverImage {\n          alt\n          image {\n            altText\n            height\n            url\n            width\n          }\n        }\n        squareLogo {\n          alt\n          image {\n            altText\n            height\n            url\n            width\n          }\n        }\n        shortDescription\n        slogan\n      }\n      description\n      id\n      moneyFormat\n      name\n      paymentSettings {\n        acceptedCardBrands\n        cardVaultUrl\n        countryCode\n        currencyCode\n        enabledPresentmentCurrencies\n        shopifyPaymentsAccountId\n        supportedDigitalWallets\n      }\n      primaryDomain {\n        host\n        sslEnabled\n        url\n      }\n      shipsToCountries\n    }\n  }\n"): (typeof documents)["\n  query getShopDetails($country: CountryCode, $language: LanguageCode)\n  @inContext(country: $country, language: $language) {\n    shop {\n      brand {\n        colors {\n          primary {\n            background\n            foreground\n          }\n          secondary {\n            background\n            foreground\n          }\n        }\n        coverImage {\n          alt\n          image {\n            altText\n            height\n            url\n            width\n          }\n        }\n        squareLogo {\n          alt\n          image {\n            altText\n            height\n            url\n            width\n          }\n        }\n        shortDescription\n        slogan\n      }\n      description\n      id\n      moneyFormat\n      name\n      paymentSettings {\n        acceptedCardBrands\n        cardVaultUrl\n        countryCode\n        currencyCode\n        enabledPresentmentCurrencies\n        shopifyPaymentsAccountId\n        supportedDigitalWallets\n      }\n      primaryDomain {\n        host\n        sslEnabled\n        url\n      }\n      shipsToCountries\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query shopPolicies($country: CountryCode, $language: LanguageCode)\n  @inContext(country: $country, language: $language) {\n    shop {\n      privacyPolicy {\n        ...shopPolicy\n      }\n      refundPolicy {\n        ...shopPolicy\n      }\n      shippingPolicy {\n        ...shopPolicy\n      }\n      termsOfService {\n        ...shopPolicy\n      }\n    }\n  }\n"): (typeof documents)["\n  query shopPolicies($country: CountryCode, $language: LanguageCode)\n  @inContext(country: $country, language: $language) {\n    shop {\n      privacyPolicy {\n        ...shopPolicy\n      }\n      refundPolicy {\n        ...shopPolicy\n      }\n      shippingPolicy {\n        ...shopPolicy\n      }\n      termsOfService {\n        ...shopPolicy\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;