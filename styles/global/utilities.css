@keyframes filter-animation {
  0% {
    filter: invert(50%) sepia(75%) saturate(2500%) brightness(120%)
      contrast(120%) hue-rotate(0deg);
  }

  50% {
    filter: invert(50%) sepia(75%) saturate(2500%) brightness(120%)
      contrast(120%) hue-rotate(180deg);
  }

  100% {
    filter: invert(50%) sepia(75%) saturate(2500%) brightness(120%)
      contrast(120%) hue-rotate(360deg);
  }
}

.filterAnimation {
  animation: filter-animation 10s infinite;
  filter: invert(50%) sepia(75%) saturate(2500%) brightness(120%)
    contrast(120%) hue-rotate(360deg);
}

.constrainWidth {
  main {
    justify-self: center;
    max-inline-size: 60rem;
    min-inline-size: 60rem;
  }
}

.fitViewport {
  inset: 0;

  @supports (block-size: 100dvh) {
    block-size: 100dvh;
  }

  @supports not (block-size: 100dvh) {
    block-size: calc(
      100vh - (env(safe-area-inset-top) + env(safe-area-inset-bottom))
    );
  }

  @supports (inline-size: 100dvw) {
    inline-size: 100dvw;
  }

  @supports not (inline-size: 100dvw) {
    inline-size: calc(
      100vw - (env(safe-area-inset-left) + env(safe-area-inset-right))
    );
  }
}

.fitViewportHeight {
  @supports (block-size: 100dvh) {
    block-size: 100dvh;
  }

  @supports not (block-size: 100dvh) {
    block-size: calc(
      100vh - (env(safe-area-inset-top) + env(safe-area-inset-bottom))
    );
  }
}

.fitViewportWidth {
  @supports (inline-size: 100dvw) {
    inline-size: 100dvw;
  }

  @supports not (inline-size: 100dvw) {
    inline-size: calc(
      100vw - (env(safe-area-inset-left) + env(safe-area-inset-right))
    );
  }
}

.fitViewportMinimumHeight {
  @supports (min-block-size: 100dvh) {
    min-block-size: 100dvh;
  }

  @supports not (min-block-size: 100dvh) {
    min-block-size: calc(
      100vh - (env(safe-area-inset-top) + env(safe-area-inset-bottom))
    );
  }
}

.fitViewporMinimum {
  inset: 0;

  @supports (min-block-size: 100dvh) {
    min-block-size: 100dvh;
  }

  @supports not (min-block-size: 100dvh) {
    min-block-size: calc(
      100vh - (env(safe-area-inset-top) + env(safe-area-inset-bottom))
    );
  }

  @supports (min-inline-size: 100dvw) {
    min-inline-size: 100dvw;
  }

  @supports not (min-inline-size: 100dvw) {
    min-inline-size: calc(
      100vw - (env(safe-area-inset-left) + env(safe-area-inset-right))
    );
  }
}

.fitViewporMinimumWidth {
  @supports (min-inline-size: 100dvw) {
    min-inline-size: 100dvw;
  }

  @supports not (min-inline-size: 100dvw) {
    min-inline-size: calc(
      100vw - (env(safe-area-inset-left) + env(safe-area-inset-right))
    );
  }
}

.logotype {
  font-family: "Bomber Escort Outline", cursive;
  font-style: italic;
  padding-inline-end: 2rem;
}

.dark:invert {
  @media (prefers-color-scheme: dark) {
    filter: invert(1);
  }
}

.mask {
  background-attachment: fixed;
  background-clip: text;
  background-image: url("/images/art/desktop.jpg");
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
  color: transparent;
  display: grid;
  place-content: center;
  text-align: center;
  text-fill-color: transparent;
}

.onLoadingComplete {
  opacity: 0;

  @media screen and (prefers-reduced-motion: no-preference) {
    transition: opacity 0.25s linear 0s;
  }

  &[data-loaded="true"] {
    opacity: 1;
  }
}

.drawerContentOverflowY {
  overflow-y: auto !important;
}

.fontBomberEscort {
  font-family: "Bomber Escort Outline", cursive;
  font-style: italic;
  padding-inline-end: 0.5rem;
}

.cta {
  @apply uppercase;
}

.effectFabricSample {
  /* box-shadow: 2.5px 5px 10px 0px rgba(0,0,0,0.15); */
  clip-path: none;
  --mask: linear-gradient(#000 0 0) center/calc(100% - 0.5em) calc(100% - 0.5em)
      no-repeat,
    conic-gradient(from 135deg at top, #0000, #000 1deg 89deg, #0000 90deg) 0 0 /0.5em
      0.25em space no-repeat,
    conic-gradient(from -45deg at bottom, #0000, #000 1deg 89deg, #0000 90deg) 0
      100%/0.5em 0.25em space no-repeat,
    conic-gradient(from 45deg at left, #0000, #000 1deg 89deg, #0000 90deg) 0 0 /0.25em
      0.5em no-repeat space,
    conic-gradient(from -135deg at right, #0000, #000 1deg 89deg, #0000 90deg)
      100% 0/0.25em 0.5em no-repeat space;
  margin: unset;
  mask: var(--mask);
  position: relative;  

  img, video {
    margin-inline: auto;
    width: 100%;
    z-index: 5;
  }
}

.effectFabricTexture {
  background-image: url('/images/textures/light-gray-fabric-texture.jpg');
  background-size: cover;

  img {
    mix-blend-mode: multiply;
  }
}